CD.InkSign = {
    canvas: null,
    signaturePad: null,
    init: function ()
    {
        CD.InkSign.canvas = $("#signature-pad canvas")[0];
        if (CD.InkSign.canvas != null) {
            CD.InkSign.signaturePad = new SignaturePad(CD.InkSign.canvas, {
                // It's Necessary to use an opaque color when saving image as JPEG;
                // this option can be omitted if only saving as PNG or SVG
                backgroundColor: 'rgb(255, 255, 255)'
            });

            // On mobile devices it might make more sense to listen to orientation change,
            // rather than window resize events.
            window.onresize = CD.InkSign.resizeCanvas;
            CD.InkSign.resizeCanvas();
        }    

        $("#undo_InkSign").click(function (event) {
            var data = CD.InkSign.signaturePad.toData();

            if (data) {
                data.pop(); // remove the last dot or line
                CD.InkSign.signaturePad.fromData(data);
            }
        });

        $("#clear_InkSign").click(function (event) {
            CD.InkSign.signaturePad.clear();
        });

        $("#changecolor_InkSign").click(function (event) {
            var r = Math.round(Math.random() * 255);
            var g = Math.round(Math.random() * 255);
            var b = Math.round(Math.random() * 255);
            var color = "rgb(" + r + "," + g + "," + b + ")";

            CD.InkSign.signaturePad.penColor = color;
        });

        $("#savepng_InkSign").click(function (event) {
            if (CD.InkSign.signaturePad.isEmpty()) {
                alert("Please provide a signature first.");
            } else {
                var dataURL = CD.InkSign.signaturePad.toDataURL();
                CD.InkSign.download(dataURL, "signature.png");
            }
        });

        $("#savejpg_InkSign").click(function (event) {
            if (CD.InkSign.signaturePad.isEmpty()) {
                alert("Please provide a signature first.");
            } else {
                var dataURL = CD.InkSign.signaturePad.toDataURL("image/jpeg");
                CD.InkSign.download(dataURL, "signature.jpg");
            }
        });

        $("#savesvg_InkSign").click(function (event) {
            if (CD.InkSign.signaturePad.isEmpty()) {
                alert("Please provide a signature first.");
            } else {
                var dataURL = CD.InkSign.signaturePad.toDataURL('image/svg+xml');
                CD.InkSign.download(dataURL, "signature.svg");
            }
        });
    },

    // Adjust canvas coordinate space taking into account pixel ratio,
    // to make it look crisp on mobile devices.
    // This also causes canvas to be cleared.
    resizeCanvas: function() {
        // When zoomed out to less than 100%, for some very strange reason,
        // some browsers report devicePixelRatio as less than 1
        // and only part of the canvas is cleared then.
        var ratio =  Math.max(window.devicePixelRatio || 1, 1);

        // This part causes the canvas to be cleared
        CD.InkSign.canvas.width = CD.InkSign.canvas.offsetWidth * ratio;
        CD.InkSign.canvas.height = CD.InkSign.canvas.offsetHeight * ratio;
        CD.InkSign.canvas.getContext("2d").scale(ratio, ratio);

        // This library does not listen for canvas changes, so after the canvas is automatically
        // cleared by the browser, SignaturePad#isEmpty might still return false, even though the
        // canvas looks empty, because the internal data of this library wasn't cleared. To make sure
        // that the state of this library is consistent with visual state of the canvas, you
        // have to clear it manually.
        CD.InkSign.signaturePad.clear();
    },

    download: function(dataURL, filename) {
        var blob = CD.InkSign.dataURLToBlob(dataURL);
        var url = window.URL.createObjectURL(blob);

        var a = document.createElement("a");
        a.style = "display: none";
        a.href = url;
        a.download = filename;

        document.body.appendChild(a);
        a.click();

        window.URL.revokeObjectURL(url);
    },

    // One could simply use Canvas#toBlob method instead, but it's just to show
    // that it can be done using result of SignaturePad#toDataURL.
    dataURLToBlob: function(dataURL) {
        // Code taken from https://github.com/ebidel/filer.js
        var parts = dataURL.split(';base64,');
        var contentType = parts[0].split(":")[1];
        var raw = window.atob(parts[1]);
        var rawLength = raw.length;
        var uInt8Array = new Uint8Array(rawLength);

        for (var i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], { type: contentType });
    }
  
}




